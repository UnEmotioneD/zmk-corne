/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        windows_copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        windows_paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };
    };

    macros {
        my_email: my_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp L &kp A &kp C &kp K &kp E &kp A &kp G &kp L &kp E &kp N1 &kp N0 &kp AT &kp I &kp C &kp L &kp O &kp U &kp D &kp DOT &kp C &kp O &kp M>;
            label = "MY_EMAIL";
        };

        vim_search: vim_search {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp PRCNT &kp S &kp FSLH>;
            label = "VIM_SEARCH";
        };

        dvorak_to_kor_mac: dvorak_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F16 &to 0>;
            label = "DVORAK_LANG";
        };

        kor_to_dvorak_mac: kor_to_dvorak_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F16 &to 0>;
            label = "KOR_TO_DVORAK_MAC";
        };

        caps: caps_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPSLOCK>;
            label = "CAPS_MACRO";
            tap-ms = <200>;
        };
    };

    behaviors {
        new_mt: new_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <(-1)>;
        };

        new_lt: new_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_LT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <(-1)>;
        };

        right_hrm: right_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 39 40 41>;
            require-prior-idle-ms = <(-1)>;
        };

        left_hrm: left_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 13 14 15 16 36 37 38>;
            require-prior-idle-ms = <(-1)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R         &kp T              &kp Y         &kp U            &kp I          &kp O    &kp P          &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D         &kp F         &kp G              &kp H         &kp J            &kp K          &kp L    &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C         &kp V         &kp B              &kp N         &kp M            &kp COMMA      &kp DOT  &kp FSLH       &kp RIGHT_SHIFT
                                &kp LEFT_GUI  &kp LEFT_ALT  &new_lt 1 ENTER    &lt 2 ESCAPE  &new_lt 4 SPACE  &kp RIGHT_ALT
            >;
        };

        layer_1 {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR      &kp PERCENT        &kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp N1           &kp N2            &kp N3             &kp N4          &kp N5             &kp N6          &kp N7         &kp N8        &kp N9                &kp N0                 &kp DOUBLE_QUOTES
&trans  &none            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp UNDERSCORE  &kp MINUS      &kp PLUS      &trans                &kp EQUAL              &trans
                                           &trans             &trans          &trans             &mo 3           &trans         &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &none              &kp C_MUTE      &kp PAGE_UP        &kp PAGE_DOWN    &kp C_PLAY  &kp DELETE            &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &kp HOME           &kp LEFT        &kp DOWN           &kp UP_ARROW     &kp RIGHT   &kp C_BRIGHTNESS_INC  &none
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &kp END            &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_BRIGHTNESS_DEC  &trans
                         &trans   &trans   &new_lt 3 ENTER    &trans          &trans             &trans
            >;
        };

        layer_3 {
            bindings = <
&my_email    &kp LC(LA(L))  &kp LA(NUMBER_1)  &kp LA(NUMBER_4)  &kp LA(NUMBER_6)   &kp LS(F10)      &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2     &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_CLR
&none        &kp LS(LA(Q))  &kp F12           &kp LC(PAGE_UP)   &kp LC(PAGE_DOWN)  &kp LC(F11)      &kp LC(F5)    &kp LC(GRAVE)  &kp LS(LC(M))    &kp LS(LC(E))  &kp LS(LC(P))  &none
&bootloader  &kp LS(LC(F))  &kp LS(LC(O))     &kp LS(LA(R))     &kp LS(LA(S))      &kp LS(LC(R))    &none         &kp LA(F4)     &kp PRINTSCREEN  &kp LS(LC(G))  &kp LS(LA(F))  &bootloader
                                              &trans            &trans             &trans           &trans        &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &kp TILDE  &kp PIPE       &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp GRAVE  &kp BACKSLASH  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans         &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans     &trans         &trans    &trans  &trans  &trans
            >;
        };
    };
};
